server:
  applicationConnectors:
    - type: https
      port: 50113
      keyStorePath: /ida/policy/policy.ks
      keyStorePassword: ${KEYSTORE_PASSWORD}
      validatePeers: false
      validateCerts: false
      # TLSv1.1 included as curl seems to get unset with 1.2 for some
      # as-yet-uninvestigated reason.
      supportedProtocols:
        - "TLSv1.1"
        - "TLSv1.2"
      excludedCipherSuites: []
      supportedCipherSuites:
        - TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 # for TLS 1.2
        - TLS_DHE_RSA_WITH_AES_128_CBC_SHA    # for TLS 1.1

  adminConnectors:
    - type: http
      port: 50111

  requestLog:
    type: classic
    appenders:
      - type: file
        currentLogFilename: /var/log/ida/debug/policy_access.log
        archivedLogFilenamePattern: /var/log/ida/debug/policy_access.log.%d.gz
        archivedFileCount: 7
      - type: logstash-file
        currentLogFilename: /var/log/ida/policy_access.log
        archivedLogFilenamePattern: /var/log/ida/policy_access.log.%d.gz
        archivedFileCount: 7
      - type: logstash-syslog
        facility: local2
        tag: policy

timeoutPeriod: 90m
assertionLifetime: 60m
acceptSelfSignedCerts: true
matchingServiceResponseWaitPeriod: 60s


metrics:
  reporters:
    - type: graphite
      host: graphite
      port: 2003
      prefix: ${GRAPHITE_PREFIX}
      frequency: 10s

sessionStoreConfiguration:
  infinispanConfiguration:
    enabled: true
    configuration:
      bindAddress: ${INFINISPAN_BIND_ADDRESS}
      initialHosts: ${INFINISPAN_INITIAL_HOSTS}
      clusterName: 'policy-cluster'
      port: 7801
      type: ${INFINISPAN_TYPE}
      expiration: 150m
      encryptConfiguration:
        keyStoreName: /ida/policy/keys/infinispan_policy.ks
        keyStorePassword: ${INFINISPAN_ENCRYPT_KEYSTORE_PASSWORD}
        encryptionKeyAlias: 'infinispan_policy'
      authConfiguration:
        authValue: ${INFINISPAN_AUTH_AUTHVALUE}
        keyStorePath: /ida/policy/keys/infinispan_policy.ks
        keyStorePassword: ${INFINISPAN_AUTH_KEYSTORE_PASSWORD}
        keyStoreType: 'jceks'
        certAlias: 'infinispan_policy_auth_key'
        cipherType: 'RSA'
      persistenceToFileEnabled: false


eventSinkUri: https://event-sink:51103

samlEngineUri: https://saml-engine:50123

samlSoapProxyUri: ${SAML_SOAP_PROXY_URI}

enableRetryTimeOutConnections: true

httpClient:
  timeout: 60s
  timeToLive: 10m
  connectionTimeout: 4s
  keepAlive: 60s
  chunkedEncodingEnabled: false
  validateAfterInactivityPeriod: 5s
  tls:
    protocol: TLSv1.2
    trustStorePath: /ida/policy/policy.ks
    trustStorePassword: ${HTTP_TLS_TRUSTSTORE_PASSWORD}
    verifyHostname: false

samlSoapProxyClient:
  timeout: 60s
  timeToLive: 10m
  connectionTimeout: 4s
  keepAlive: 60s
  chunkedEncodingEnabled: false
  validateAfterInactivityPeriod: 5s
  tls:
    protocol: TLSv1.2
    trustStorePath: /ida/truststore/saml_soap_proxy_tls_truststore.ts
    trustStorePassword: ${SAML_SOAP_PROXY_TLS_TRUSTSTORE_PASSWORD}
    verifyHostname: ${SAML_SOAP_PROXY_TLS_CLIENT_VERIFYHOSTNAME}

configUri: https://config:50243

serviceInfo:
  name: policy

clientTrustStoreConfiguration:
  path: /ida/truststore/ida_truststore.ts
  password: ${CLIENT_TRUSTSTORE_PASSWORD}

logging:
  level: INFO
  appenders:
    - type: file
      currentLogFilename: /var/log/ida/debug/policy.log
      archivedLogFilenamePattern: /var/log/ida/debug/policy.log.%d.gz
      archivedFileCount: 7
    - type: logstash-file
      currentLogFilename: /var/log/ida/policy.log
      archivedLogFilenamePattern: /var/log/ida/policy.log.%d.gz
      archivedFileCount: 7
    - type: logstash-syslog
      facility: local2
      tag: policy
    - type: raven
      dsn: ${SENTRY_DSN:-naive+https://sentry/1}
      threshold: ERROR
      tags: service-name:policy

eidas: ${EIDAS_ENABLED}

eventEmitterConfiguration:
  enabled: ${EVENT_EMITTER_ENABLED}
  accessKeyId: ${EVENT_EMITTER_ACCESS_KEY_ID}
  secretAccessKey: ${EVENT_EMITTER_SECRET_ACCESS_KEY}
  region: eu-west-2
  queueAccountId: ${EVENT_EMITTER_ACCOUNT_ID}
  sourceQueueName: ${EVENT_EMITTER_SOURCE_QUEUE_NAME}
  encryptionKey: ${EVENT_EMITTER_ENCRYPTION_KEY}
